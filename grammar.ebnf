@@grammar::UnitLang

start
    =
    | command $
    | function_definition $
    | variable_definition $
    | expression $
    ;

command::COMMAND
    =
    | cmd:'evaluate' ~ expression:expression
    | cmd:'exclude' ~ expression:expression
    | cmd:'render' ~ path:path
    | cmd:'exit'
    | cmd:'quit'
    | cmd:'newline'
    ;

path
    =
    /.+/
    ;

function_definition::FunctionDefinition
    = name:identifier '(' args:[definition_argument_list] ')' '=' ~ expression:expression
    ;

variable_definition::VariableDefinition
    = name:identifier '=' ~ expression:expression
    ;

expression
    =
    | addition
    | subtraction
    | term
    ;


addition::Add
    =
    left:term op:'+' ~ right:expression
    ;


subtraction::Subtract
    =
    left:term op:'-' ~ right:expression
    ;


term
    =
    | multiplication
    | division
    | factor
    ;


multiplication::Multiply
    =
    left:factor op:'*' ~ right:term
    ;


division::Divide
    =
    left:factor '/' ~ right:term
    ;


factor
    =
    | inversion
    | unary
    ;

inversion::Invert
    =
    '-' ~ value:factor
    ;

unary
    =
    | exponentiation
    | power
    ;

exponentiation::Exponentiate
    =
    base:power ('*' '*' | '^') ~ exponent:unary
    ;

power
    =
    | subexpression
    | abs
    | call
    | access
    | unit_number
    ;


subexpression::Subexpression
    =
    '(' ~ expr:expression ')'
    ;

call::Call
    =
    function:identifier '(' ~ args:[call_argument_list] ')'
    ;

call_argument_list
    =
    @:expression {',' @:expression}*
    ;

definition_argument_list::Definition_argument_list
    =
    first:identifier rest:{',' identifier}*
    ;

access::Access
    = name:identifier
    ;

abs::Absolute
    =
    '|' ~ expr:expression '|'
    ;

unit_number::Unit_number
    =
    | value:NUMBER unit:UNIT
    | value:NUMBER
    ;

UNIT::Unit
    =
    {{/[a-z]/ | /[A-Z]/}+ [NUMBER]}*
    ;


identifier::Ident
    =
    first:(/[a-z]/ | /[A-Z]/ | '_') rest:{/[a-z]/ | /[A-Z]/ | '_' | /[0-9]/}*
    ;


NUMBER::Number
    =
    /[-+]?[0-9]*\.?[0-9]*/
    ;
